// backend/src/services/minio.js - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø –¥–ª—è Docker
import * as Minio from 'minio';
import { v4 as uuidv4 } from 'uuid';

let minioClient = null;

/**
 * Initialize MinIO client –¥–ª—è Docker + nginx proxy setup
 */
async function initializeMinio() {
  try {
    console.log('üöÄ Initializing MinIO for Docker + nginx proxy...');
    
    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π endpoint –¥–ª—è Docker —Å–µ—Ç–∏
    const minioEndpoint = process.env.MINIO_ENDPOINT || 'minio';
    const minioPort = parseInt(process.env.MINIO_PORT) || 9000;
    const accessKey = process.env.MINIO_ACCESS_KEY || 'prodportfolioadmin';
    const secretKey = process.env.MINIO_SECRET_KEY || 'prod-portfolio-secret-key-2025';
    
    console.log(`üîß MinIO Config:`, {
      endpoint: minioEndpoint,
      port: minioPort,
      accessKey: accessKey,
      useSSL: false
    });
    
    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º IPv4
    minioClient = new Minio.Client({
      endPoint: minioEndpoint,
      port: minioPort,
      useSSL: false,
      accessKey: accessKey,
      secretKey: secretKey,
      // ‚úÖ –î–û–ë–ê–í–õ–Ø–ï–ú –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è IPv4
      region: 'us-east-1',
      partSize: 64 * 1024 * 1024, // 64MB
    });

    const bucketName = process.env.MINIO_BUCKET_NAME || 'portfolio-files';
    
    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    let retries = 30; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å 15 –¥–æ 30
    let connected = false;
    
    while (retries > 0 && !connected) {
      try {
        console.log(`üîÑ Attempting to connect to MinIO ${minioEndpoint}:${minioPort}... (${retries} retries left)`);
        
        // ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
        const buckets = await Promise.race([
          minioClient.listBuckets(),
          new Promise((_, reject) => 
            setTimeout(() => reject(new Error('Connection timeout')), 5000)
          )
        ]);
        
        console.log('‚úÖ Connected to MinIO successfully, buckets:', buckets.length);
        connected = true;
        break;
        
      } catch (error) {
        console.log(`‚è≥ MinIO connection failed: ${error.message}`);
        retries--;
        
        if (retries === 0) {
          console.error('‚ùå MinIO connection details:', {
            endpoint: minioEndpoint,
            port: minioPort,
            accessKey: accessKey,
            error: error.message,
            stack: error.stack
          });
          throw new Error(`Failed to connect to MinIO after 30 attempts: ${error.message}`);
        }
        
        // –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
        await new Promise(resolve => setTimeout(resolve, 2000));
      }
    }
    
    // ‚úÖ –°–æ–∑–¥–∞–µ–º bucket –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    try {
      const bucketExists = await minioClient.bucketExists(bucketName);
      if (!bucketExists) {
        await minioClient.makeBucket(bucketName, 'us-east-1');
        console.log(`‚úÖ Bucket '${bucketName}' created`);
      } else {
        console.log(`‚úÖ Bucket '${bucketName}' exists`);
      }
    } catch (bucketError) {
      console.error('‚ùå Bucket creation/check failed:', bucketError);
      // –ù–µ –±—Ä–æ—Å–∞–µ–º –æ—à–∏–±–∫—É, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É
    }
    
    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è CORS –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    try {
      const corsConfig = {
        CORSRules: [
          {
            ID: 'AllowAll',
            AllowedHeaders: ['*'],
            AllowedMethods: ['GET', 'POST', 'PUT', 'DELETE', 'HEAD'],
            AllowedOrigins: ['*'], // –†–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ origins –¥–ª—è –Ω–∞—á–∞–ª–∞
            ExposeHeaders: ['ETag', 'Content-Length', 'Content-Type'],
            MaxAgeSeconds: 3600
          }
        ]
      };

      await minioClient.setBucketCors(bucketName, corsConfig);
      console.log('‚úÖ CORS configured');
    } catch (corsError) {
      console.warn('‚ö†Ô∏è CORS config failed (but continuing):', corsError.message);
    }
    
    // ‚úÖ –ü—É–±–ª–∏—á–Ω–∞—è –ø–æ–ª–∏—Ç–∏–∫–∞
    try {
      const policy = {
        Version: '2012-10-17',
        Statement: [
          {
            Effect: 'Allow',
            Principal: { AWS: ['*'] },
            Action: ['s3:GetObject'],
            Resource: [`arn:aws:s3:::${bucketName}/*`]
          }
        ]
      };
      
      await minioClient.setBucketPolicy(bucketName, JSON.stringify(policy));
      console.log('‚úÖ Bucket policy set for public access');
    } catch (policyError) {
      console.warn('‚ö†Ô∏è Bucket policy failed (but continuing):', policyError.message);
    }
    
    console.log('‚úÖ MinIO initialized successfully');
    return minioClient;
    
  } catch (error) {
    console.error('‚ùå MinIO initialization failed:', error);
    throw error;
  }
}

/**
 * Upload file to MinIO
 */
async function uploadFile(file, folder = 'uploads') {
  try {
    if (!minioClient) {
      throw new Error('MinIO client not initialized');
    }
    
    const bucketName = process.env.MINIO_BUCKET_NAME || 'portfolio-files';
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
    const fileExtension = file.originalname.split('.').pop();
    const fileName = `${folder}/${uuidv4()}.${fileExtension}`;
    
    const metaData = {
      'Content-Type': file.mimetype,
      'X-Original-Name': file.originalname,
      'X-Upload-Date': new Date().toISOString(),
      'Cache-Control': 'public, max-age=31536000',
    };
    
    console.log(`üì§ Uploading file: ${fileName} (${file.size} bytes)`);
    
    // ‚úÖ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª —Å —Ç–∞–π–º–∞—É—Ç–æ–º
    await Promise.race([
      minioClient.putObject(bucketName, fileName, file.buffer, file.size, metaData),
      new Promise((_, reject) => 
        setTimeout(() => reject(new Error('Upload timeout')), 30000) // 30 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
      )
    ]);
    
    // ‚úÖ URL —á–µ—Ä–µ–∑ nginx proxy
    const fileUrl = `https://kartofan.online/media/${bucketName}/${fileName}`;
    
    console.log('‚úÖ File uploaded successfully:', fileName);
    console.log('üîó Public URL:', fileUrl);
    
    return {
      fileName,
      originalName: file.originalname,
      size: file.size,
      mimetype: file.mimetype,
      url: fileUrl,
      bucket: bucketName
    };
    
  } catch (error) {
    console.error('‚ùå Upload error:', error);
    throw new Error(`File upload failed: ${error.message}`);
  }
}

/**
 * Get MinIO client instance
 */
function getMinioClient() {
  if (!minioClient) {
    throw new Error('MinIO not initialized. Call initializeMinio() first.');
  }
  return minioClient;
}

/**
 * Delete file from MinIO
 */
async function deleteFile(fileName) {
  try {
    if (!minioClient) {
      throw new Error('MinIO client not initialized');
    }
    
    const bucketName = process.env.MINIO_BUCKET_NAME || 'portfolio-files';
    
    await minioClient.removeObject(bucketName, fileName);
    console.log('üóëÔ∏è File deleted:', fileName);
    
    return { success: true, fileName };
    
  } catch (error) {
    console.error('‚ùå Delete error:', error);
    throw new Error(`File deletion failed: ${error.message}`);
  }
}

/**
 * Get file URL - —á–µ—Ä–µ–∑ nginx proxy
 */
async function getFileUrl(fileName, expiry = 24 * 60 * 60) {
  try {
    const bucketName = process.env.MINIO_BUCKET_NAME || 'portfolio-files';
    
    // –î–ª—è –ø—É–±–ª–∏—á–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ —á–µ—Ä–µ–∑ nginx –Ω–µ –Ω—É–∂–Ω—ã signed URLs
    return `https://kartofan.online/media/${bucketName}/${fileName}`;
    
  } catch (error) {
    console.error('‚ùå URL generation error:', error);
    throw error;
  }
}

export {
  initializeMinio,
  getMinioClient,
  uploadFile,
  deleteFile,
  getFileUrl
};